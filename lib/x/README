
Compiling:

make

The server binary will be server/serv 
The client binary will be client/cli 


_________________________________________

Running the server:

cd server
./server.sh

- server.sh calls ./serv to startup the server on port 9999.
- Uploaded files get stored in server/uploaded directory for now.
- It logs through syslog so there is more info in there.


Running the client:

cd client
./client.sh filename

This will upload filename to the server/uploaded directory.


_________________________________________

Other tests:


With the server running.

cd client/images
./make_more.sh

It will create more images in the same directory.

cd .. # now in client/ directory
./client_test_lot.sh images/lips.png 1200


This will upload all the images in the images directory to the server.
More comments in client_test_lot.sh for how to run it with other files.


./client_test_error.sh 

Will test illegal client commands in a loop.


To test on multiple hosts copy the server directory to one host
and client directory to other and change the shell scripts to use
the right host names and ports and run.

_________________________________________

Source code

The server creates worker threads on startup that handles incoming connections.
When a connection arrives it checks which thread isn't busy and gives it the
connection to handle and finish of(all in thread_pool.c, that dispatches the
connection to protocols/filetrans.c(following protocols/protocol_if.h) through
a callback that handles the actual uploading of the files).  The thread pool
can also be used for anywhere one one needs worker threads (see
tests/thread_pool_test.c).

The client uses sock_cli.c to connect to the server and the handles the
protocol through protocols/filetrans.c(following interface
protocols/protocol_if.h)

Both the client and server takes a pointer to a protocol_if
(protocols/protocol_if.h) that handles the protocol. In this way one can extend
the program with new protocols. 

client.c 	- client main
server.c 	- server main
dlog.[ch] 	- logging 
file.h      	- file system related functions
thread_pool.[ch]- thread pool used by sock.c to handle multiple connections
sock_cli.[ch]	- socket for client initialization and dispatching
sock_serv.[ch]	- socket for client initialization and dispatching
debug.h         - debugging macro's
protocols/protocol_if.h   - protocol interface.  	
protocols/filetrans.[ch]  - protocol for uploading. Explained on top of file.  	
tests/thread_pool_test.c  - simple test to show how to use the thread pool
on it's own.


_________________________________________

Improvements:

- Add more commands(delete, get, uploading of multiple files etc.)
- Make things more configurable(where the files get uploaded etc.) through
  command line options or environment variables.
- Support for other operating systems(file paths)
- Let the client also use the thread pool so it can do multiple uploads at
  once.
- Add comments.
- Security.


